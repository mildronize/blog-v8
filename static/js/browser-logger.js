var f=Object.defineProperty;var p=(i,e,t)=>e in i?f(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var d=(i,e,t)=>p(i,typeof e!="symbol"?e+"":e,t);class v{constructor(e){this.eventName=e,this.validateRuntime(window)}validateRuntime(e){if(e===void 0)throw new Error("This function can only be run in the browser")}dispatch(e){this.validateRuntime(window),window.dispatchEvent(new CustomEvent(this.eventName,{detail:e}))}listen(e){this.validateRuntime(window),window.addEventListener(this.eventName,t=>{e&&e(t)})}removeListener(e){this.validateRuntime(window),window.removeEventListener(this.eventName,t=>{e&&e(t)})}get name(){return this.eventName}}function w(i){return{configDetail:()=>new v(i)}}const $=w("SearchModalEvent").configDetail(),c="api",h="../public",r=`${h}/${c}`,m={logLevel:"info",snippetsDir:".",rootDir:"..",rootPublicDir:h,apiPath:c,postMetadata:{targetFile:`${r}/post-metadata.json`},searchIndex:{small:{dir:`${r}/search-index-small`,metadataPath:`${r}/search-index-metadata-small.json`},large:{dir:`${r}/search-index-large`,metadataPath:`${r}/search-index-metadata-large.json`}},blogIdModule:{sourceDirectories:["../content/posts"],targetFile:`${r}/id-mapper.json`,ignoreMarkdownFiles:["_index.md"]}};function E(i,e=6){const t=i.split("").reduce((o,s)=>(o<<5)-o+s.charCodeAt(0)|0,0);return Math.abs(t).toString(36).slice(0,e)}const L=i=>new l(i,m.logLevel),a=class a{constructor(e,t="debug"){d(this,"logLevelIndex");if(this.scope=e,this.logLevelIndex=a.LEVELS.indexOf(t.toUpperCase()),this.logLevelIndex===-1)throw new Error(`Invalid log level: ${t}. Valid levels are ${a.LEVELS.join(", ")}.`)}formatMessage(e,t,o){const s=this.scope?`[${this.scope}]`:"[Default]",n=o?`(#${o})`:"",g=t.map(u=>String(u)).join(" ");return`${e.toUpperCase()}:${n} ${s} ${g}`}debugMessage(e){const t=e.some(n=>typeof n!="string"),o=e.map(n=>String(n)).join(" "),s=t?E(o):void 0;if(t){for(let n=0;n<e.length;n++)typeof e[n]!="string"&&console.debug(`#${s}/${n}:`,e[n]);return s}}logMessage(e,t){if(a.LEVELS.indexOf(e.toUpperCase())<this.logLevelIndex)return;const s=this.debugMessage(t),n=this.formatMessage(e,t,s);return e==="debug"?console.debug(n):e==="info"?console.info(n):e==="warn"?console.warn(n):console.error(n)}info(...e){this.logMessage("info",e)}debug(...e){this.logMessage("debug",e)}error(...e){this.logMessage("error",e)}warn(...e){this.logMessage("warn",e)}fatal(...e){return this.logMessage("fatal",e),new Error(e.join(" "))}};d(a,"LEVELS",["DEBUG","INFO","WARN","ERROR","FATAL"]);let l=a;export{L as c,$ as s};
